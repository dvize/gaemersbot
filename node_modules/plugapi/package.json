{
  "name": "plugapi",
  "version": "2.3.1",
  "author": {
    "name": "Thomas Andresen",
    "email": "TAT@plugCubed.net"
  },
  "description": "Generic API for building plug.dj bots",
  "contributors": [
    {
      "name": "Chris Vickery",
      "email": "chrisinajar@gmail.com"
    },
    {
      "name": "ging"
    },
    {
      "name": "Nicolas Jeker",
      "email": "n.jeker@gmx.net"
    },
    {
      "name": "Chris Bellew",
      "email": "atomjack@gmail.com"
    }
  ],
  "main": "./bin/client.js",
  "keywords": [
    "plug.dj",
    "plug",
    "api"
  ],
  "dependencies": {
    "node-html-encoder": "*",
    "ws": "*",
    "request": "*",
    "source-map-support": "*",
    "sockjs-client-node": "https://github.com/TATDK/sockjs-client-node/tarball/master",
    "plug-dj-login": "*"
  },
  "devDependencies": {
    "grunt": "*",
    "grunt-closurecompiler": "*",
    "grunt-execute": "*"
  },
  "optionalDependencies": {
    "plug-dj-login": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/TATDK/plugapi"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/TATDK/plugapi/blob/master/LICENSE.md"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "plugapi\n=======\n\nA generic API for creating plug.dj bots.\n\nOriginally by [Chris Vickery](https://github.com/chrisinajar), now maintained by [TAT](https://github.com/TATDK).\n\n## How to use\nRun the following:\n\n```npm install plugapi --production```\n\nTo connect, do this!\n\n```\nvar PlugAPI = require('plugapi'),\n    AUTH = 'xxxxxxxxxxxxxxxxxxxxxxxxxxx=?_expires=xxxxxxxxxxxxxxxxxx==&user_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=', // Put your auth token here, it's the cookie value for usr\n    ROOM = '';\n\nvar bot = new PlugAPI(AUTH);\nbot.connect(ROOM);\n\nbot.on('roomJoin', function(room) {\n    console.log(\"Joined \" + room);\n});\n```\n\n##Examples\nHere are some bots using this API.\n\n* FoxBot in Approaching Nirvana\n\nHave a bot that uses the API? Let me know!\n\n## EventListener\nYou can listen on essentially any event that plug emits.\n```\n// basic chat handler to show incoming chats formatted nicely\nbot.on('chat', function(data) {\n    if (data.type == 'emote')\n        console.log(data.from + data.message);\n    else\n        console.log(data.from + \"> \" + data.message);\n});\n```\n\nHere's an example for automatic reconnecting on errors / close events!\n```\nvar reconnect = function() { bot.connect(ROOM); };\n\nbot.on('close', reconnect);\nbot.on('error', reconnect);\n```\n\n## Events\n\nRead about some of the events on the [wiki](https://github.com/TATDK/plugapi/wiki/events).\n\n## Actions\n\nRead about the actions on the [wiki](https://github.com/TATDK/plugapi/wiki/actions).\n\n## Contribute\n1. Clone repository to empty folder.\n2. Cd to the repository.\n3. Run `npm install` to set up the environment.\n4. Edit your code.\n5. Run `grunt` to compile the code and test.\n6. After it's bug free, you may submit it as a Pull Request to the main repo.\n\n## Misc\n\n#### Multi line chat\nSince Plug.dj cuts off chat messages at 250 characters, you can choose to have your bot split up chat messages into multiple lines:\n\n```\nvar bot = new PlugAPI(auth);\nbot.multiLine = true; // Set to true to enable multi line chat. Default is false\nbot.multiLineLimit = 5; // Set to the maximum number of lines the bot should split messages up into. Any text beyond this number will just be omitted. Default is 5.\n```\n\n#### TCP Server\nYou can start up a TCP server the bot will listen to, for remote administration\n\nExample:\n```\n    bot.tcpListen(6666, 'localhost');\n    bot.on('tcpConnect', function(socket) {\n        // executed when someone telnets into localhost port 6666\n    });\n\n    bot.on('tcpMessage', function(socket, msg) {\n        // Use socket.write, for example, to send output back to the telnet session\n        // 'msg' is whatever was entered by the user in the telnet session\n    });\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TATDK/plugapi/issues"
  },
  "homepage": "https://github.com/TATDK/plugapi",
  "_id": "plugapi@2.3.1",
  "_shasum": "945039dae5f82fedc5a24f3e77546ea7cdd3f374",
  "_from": "plugapi@",
  "_resolved": "https://registry.npmjs.org/plugapi/-/plugapi-2.3.1.tgz"
}
